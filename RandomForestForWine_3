{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "RandomForestForWine.ipynb",
      "provenance": [],
      "collapsed_sections": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "metadata": {
        "id": "z7bP6PrfLLpY",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 666
        },
        "outputId": "d6eeef55-a75e-493e-c26a-a39661c565e6"
      },
      "source": [
        "from sklearn.datasets import load_wine\n",
        "data=load_wine()\n",
        "data"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "{'DESCR': '.. _wine_dataset:\\n\\nWine recognition dataset\\n------------------------\\n\\n**Data Set Characteristics:**\\n\\n    :Number of Instances: 178 (50 in each of three classes)\\n    :Number of Attributes: 13 numeric, predictive attributes and the class\\n    :Attribute Information:\\n \\t\\t- Alcohol\\n \\t\\t- Malic acid\\n \\t\\t- Ash\\n\\t\\t- Alcalinity of ash  \\n \\t\\t- Magnesium\\n\\t\\t- Total phenols\\n \\t\\t- Flavanoids\\n \\t\\t- Nonflavanoid phenols\\n \\t\\t- Proanthocyanins\\n\\t\\t- Color intensity\\n \\t\\t- Hue\\n \\t\\t- OD280/OD315 of diluted wines\\n \\t\\t- Proline\\n\\n    - class:\\n            - class_0\\n            - class_1\\n            - class_2\\n\\t\\t\\n    :Summary Statistics:\\n    \\n    ============================= ==== ===== ======= =====\\n                                   Min   Max   Mean     SD\\n    ============================= ==== ===== ======= =====\\n    Alcohol:                      11.0  14.8    13.0   0.8\\n    Malic Acid:                   0.74  5.80    2.34  1.12\\n    Ash:                          1.36  3.23    2.36  0.27\\n    Alcalinity of Ash:            10.6  30.0    19.5   3.3\\n    Magnesium:                    70.0 162.0    99.7  14.3\\n    Total Phenols:                0.98  3.88    2.29  0.63\\n    Flavanoids:                   0.34  5.08    2.03  1.00\\n    Nonflavanoid Phenols:         0.13  0.66    0.36  0.12\\n    Proanthocyanins:              0.41  3.58    1.59  0.57\\n    Colour Intensity:              1.3  13.0     5.1   2.3\\n    Hue:                          0.48  1.71    0.96  0.23\\n    OD280/OD315 of diluted wines: 1.27  4.00    2.61  0.71\\n    Proline:                       278  1680     746   315\\n    ============================= ==== ===== ======= =====\\n\\n    :Missing Attribute Values: None\\n    :Class Distribution: class_0 (59), class_1 (71), class_2 (48)\\n    :Creator: R.A. Fisher\\n    :Donor: Michael Marshall (MARSHALL%PLU@io.arc.nasa.gov)\\n    :Date: July, 1988\\n\\nThis is a copy of UCI ML Wine recognition datasets.\\nhttps://archive.ics.uci.edu/ml/machine-learning-databases/wine/wine.data\\n\\nThe data is the results of a chemical analysis of wines grown in the same\\nregion in Italy by three different cultivators. There are thirteen different\\nmeasurements taken for different constituents found in the three types of\\nwine.\\n\\nOriginal Owners: \\n\\nForina, M. et al, PARVUS - \\nAn Extendible Package for Data Exploration, Classification and Correlation. \\nInstitute of Pharmaceutical and Food Analysis and Technologies,\\nVia Brigata Salerno, 16147 Genoa, Italy.\\n\\nCitation:\\n\\nLichman, M. (2013). UCI Machine Learning Repository\\n[https://archive.ics.uci.edu/ml]. Irvine, CA: University of California,\\nSchool of Information and Computer Science. \\n\\n.. topic:: References\\n\\n  (1) S. Aeberhard, D. Coomans and O. de Vel, \\n  Comparison of Classifiers in High Dimensional Settings, \\n  Tech. Rep. no. 92-02, (1992), Dept. of Computer Science and Dept. of  \\n  Mathematics and Statistics, James Cook University of North Queensland. \\n  (Also submitted to Technometrics). \\n\\n  The data was used with many others for comparing various \\n  classifiers. The classes are separable, though only RDA \\n  has achieved 100% correct classification. \\n  (RDA : 100%, QDA 99.4%, LDA 98.9%, 1NN 96.1% (z-transformed data)) \\n  (All results using the leave-one-out technique) \\n\\n  (2) S. Aeberhard, D. Coomans and O. de Vel, \\n  \"THE CLASSIFICATION PERFORMANCE OF RDA\" \\n  Tech. Rep. no. 92-01, (1992), Dept. of Computer Science and Dept. of \\n  Mathematics and Statistics, James Cook University of North Queensland. \\n  (Also submitted to Journal of Chemometrics).\\n',\n",
              " 'data': array([[1.423e+01, 1.710e+00, 2.430e+00, ..., 1.040e+00, 3.920e+00,\n",
              "         1.065e+03],\n",
              "        [1.320e+01, 1.780e+00, 2.140e+00, ..., 1.050e+00, 3.400e+00,\n",
              "         1.050e+03],\n",
              "        [1.316e+01, 2.360e+00, 2.670e+00, ..., 1.030e+00, 3.170e+00,\n",
              "         1.185e+03],\n",
              "        ...,\n",
              "        [1.327e+01, 4.280e+00, 2.260e+00, ..., 5.900e-01, 1.560e+00,\n",
              "         8.350e+02],\n",
              "        [1.317e+01, 2.590e+00, 2.370e+00, ..., 6.000e-01, 1.620e+00,\n",
              "         8.400e+02],\n",
              "        [1.413e+01, 4.100e+00, 2.740e+00, ..., 6.100e-01, 1.600e+00,\n",
              "         5.600e+02]]),\n",
              " 'feature_names': ['alcohol',\n",
              "  'malic_acid',\n",
              "  'ash',\n",
              "  'alcalinity_of_ash',\n",
              "  'magnesium',\n",
              "  'total_phenols',\n",
              "  'flavanoids',\n",
              "  'nonflavanoid_phenols',\n",
              "  'proanthocyanins',\n",
              "  'color_intensity',\n",
              "  'hue',\n",
              "  'od280/od315_of_diluted_wines',\n",
              "  'proline'],\n",
              " 'target': array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
              "        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
              "        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1,\n",
              "        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n",
              "        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n",
              "        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2,\n",
              "        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\n",
              "        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\n",
              "        2, 2]),\n",
              " 'target_names': array(['class_0', 'class_1', 'class_2'], dtype='<U7')}"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 3
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "XhGtwD2oLpfb",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 379
        },
        "outputId": "9e29583a-06b9-449b-d3ec-f203c969485a"
      },
      "source": [
        "import pandas as pd\n",
        "df_wine=pd.DataFrame(data=data['data'],columns=data['feature_names'])\n",
        "df_wine['wine_type']=data['target']\n",
        "df_wine.head(10)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>alcohol</th>\n",
              "      <th>malic_acid</th>\n",
              "      <th>ash</th>\n",
              "      <th>alcalinity_of_ash</th>\n",
              "      <th>magnesium</th>\n",
              "      <th>total_phenols</th>\n",
              "      <th>flavanoids</th>\n",
              "      <th>nonflavanoid_phenols</th>\n",
              "      <th>proanthocyanins</th>\n",
              "      <th>color_intensity</th>\n",
              "      <th>hue</th>\n",
              "      <th>od280/od315_of_diluted_wines</th>\n",
              "      <th>proline</th>\n",
              "      <th>wine_type</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>14.23</td>\n",
              "      <td>1.71</td>\n",
              "      <td>2.43</td>\n",
              "      <td>15.6</td>\n",
              "      <td>127.0</td>\n",
              "      <td>2.80</td>\n",
              "      <td>3.06</td>\n",
              "      <td>0.28</td>\n",
              "      <td>2.29</td>\n",
              "      <td>5.64</td>\n",
              "      <td>1.04</td>\n",
              "      <td>3.92</td>\n",
              "      <td>1065.0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>13.20</td>\n",
              "      <td>1.78</td>\n",
              "      <td>2.14</td>\n",
              "      <td>11.2</td>\n",
              "      <td>100.0</td>\n",
              "      <td>2.65</td>\n",
              "      <td>2.76</td>\n",
              "      <td>0.26</td>\n",
              "      <td>1.28</td>\n",
              "      <td>4.38</td>\n",
              "      <td>1.05</td>\n",
              "      <td>3.40</td>\n",
              "      <td>1050.0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>13.16</td>\n",
              "      <td>2.36</td>\n",
              "      <td>2.67</td>\n",
              "      <td>18.6</td>\n",
              "      <td>101.0</td>\n",
              "      <td>2.80</td>\n",
              "      <td>3.24</td>\n",
              "      <td>0.30</td>\n",
              "      <td>2.81</td>\n",
              "      <td>5.68</td>\n",
              "      <td>1.03</td>\n",
              "      <td>3.17</td>\n",
              "      <td>1185.0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>14.37</td>\n",
              "      <td>1.95</td>\n",
              "      <td>2.50</td>\n",
              "      <td>16.8</td>\n",
              "      <td>113.0</td>\n",
              "      <td>3.85</td>\n",
              "      <td>3.49</td>\n",
              "      <td>0.24</td>\n",
              "      <td>2.18</td>\n",
              "      <td>7.80</td>\n",
              "      <td>0.86</td>\n",
              "      <td>3.45</td>\n",
              "      <td>1480.0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>13.24</td>\n",
              "      <td>2.59</td>\n",
              "      <td>2.87</td>\n",
              "      <td>21.0</td>\n",
              "      <td>118.0</td>\n",
              "      <td>2.80</td>\n",
              "      <td>2.69</td>\n",
              "      <td>0.39</td>\n",
              "      <td>1.82</td>\n",
              "      <td>4.32</td>\n",
              "      <td>1.04</td>\n",
              "      <td>2.93</td>\n",
              "      <td>735.0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>14.20</td>\n",
              "      <td>1.76</td>\n",
              "      <td>2.45</td>\n",
              "      <td>15.2</td>\n",
              "      <td>112.0</td>\n",
              "      <td>3.27</td>\n",
              "      <td>3.39</td>\n",
              "      <td>0.34</td>\n",
              "      <td>1.97</td>\n",
              "      <td>6.75</td>\n",
              "      <td>1.05</td>\n",
              "      <td>2.85</td>\n",
              "      <td>1450.0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>14.39</td>\n",
              "      <td>1.87</td>\n",
              "      <td>2.45</td>\n",
              "      <td>14.6</td>\n",
              "      <td>96.0</td>\n",
              "      <td>2.50</td>\n",
              "      <td>2.52</td>\n",
              "      <td>0.30</td>\n",
              "      <td>1.98</td>\n",
              "      <td>5.25</td>\n",
              "      <td>1.02</td>\n",
              "      <td>3.58</td>\n",
              "      <td>1290.0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>14.06</td>\n",
              "      <td>2.15</td>\n",
              "      <td>2.61</td>\n",
              "      <td>17.6</td>\n",
              "      <td>121.0</td>\n",
              "      <td>2.60</td>\n",
              "      <td>2.51</td>\n",
              "      <td>0.31</td>\n",
              "      <td>1.25</td>\n",
              "      <td>5.05</td>\n",
              "      <td>1.06</td>\n",
              "      <td>3.58</td>\n",
              "      <td>1295.0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>14.83</td>\n",
              "      <td>1.64</td>\n",
              "      <td>2.17</td>\n",
              "      <td>14.0</td>\n",
              "      <td>97.0</td>\n",
              "      <td>2.80</td>\n",
              "      <td>2.98</td>\n",
              "      <td>0.29</td>\n",
              "      <td>1.98</td>\n",
              "      <td>5.20</td>\n",
              "      <td>1.08</td>\n",
              "      <td>2.85</td>\n",
              "      <td>1045.0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>13.86</td>\n",
              "      <td>1.35</td>\n",
              "      <td>2.27</td>\n",
              "      <td>16.0</td>\n",
              "      <td>98.0</td>\n",
              "      <td>2.98</td>\n",
              "      <td>3.15</td>\n",
              "      <td>0.22</td>\n",
              "      <td>1.85</td>\n",
              "      <td>7.22</td>\n",
              "      <td>1.01</td>\n",
              "      <td>3.55</td>\n",
              "      <td>1045.0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "   alcohol  malic_acid   ash  ...  od280/od315_of_diluted_wines  proline  wine_type\n",
              "0    14.23        1.71  2.43  ...                          3.92   1065.0          0\n",
              "1    13.20        1.78  2.14  ...                          3.40   1050.0          0\n",
              "2    13.16        2.36  2.67  ...                          3.17   1185.0          0\n",
              "3    14.37        1.95  2.50  ...                          3.45   1480.0          0\n",
              "4    13.24        2.59  2.87  ...                          2.93    735.0          0\n",
              "5    14.20        1.76  2.45  ...                          2.85   1450.0          0\n",
              "6    14.39        1.87  2.45  ...                          3.58   1290.0          0\n",
              "7    14.06        2.15  2.61  ...                          3.58   1295.0          0\n",
              "8    14.83        1.64  2.17  ...                          2.85   1045.0          0\n",
              "9    13.86        1.35  2.27  ...                          3.55   1045.0          0\n",
              "\n",
              "[10 rows x 14 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 4
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "tQp6MpsgMGgN",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "from sklearn.model_selection import train_test_split\n",
        "x_train,x_test,y_train,y_test=train_test_split(data['data'],data['target'],test_size=0.20,random_state=1)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Cmok-WRcNIoT",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 85
        },
        "outputId": "5441e613-efb0-4d7e-a2bb-518b1f3aae7c"
      },
      "source": [
        "print(\"X_train shape\",x_train.shape)\n",
        "print(\"X_test shape\",x_test.shape)\n",
        "print(\"Y_train shape\",y_train.shape)\n",
        "print(\"Y_test shape\",y_test.shape)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "X_train shape (142, 13)\n",
            "X_test shape (36, 13)\n",
            "Y_train shape (142,)\n",
            "Y_test shape (36,)\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "iecNtW-sNcLH",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 153
        },
        "outputId": "f924bee8-2b1f-40b4-c7c4-71a3d8f64a63"
      },
      "source": [
        "from sklearn.ensemble import  RandomForestClassifier\n",
        "model=RandomForestClassifier()\n",
        "model"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,\n",
              "                       criterion='gini', max_depth=None, max_features='auto',\n",
              "                       max_leaf_nodes=None, max_samples=None,\n",
              "                       min_impurity_decrease=0.0, min_impurity_split=None,\n",
              "                       min_samples_leaf=1, min_samples_split=2,\n",
              "                       min_weight_fraction_leaf=0.0, n_estimators=100,\n",
              "                       n_jobs=None, oob_score=False, random_state=None,\n",
              "                       verbose=0, warm_start=False)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 7
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "CDPuja4yNu13",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 153
        },
        "outputId": "25eb8e02-51b6-4e30-d2a1-ec8c725f29f1"
      },
      "source": [
        "model.fit(x_train,y_train)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,\n",
              "                       criterion='gini', max_depth=None, max_features='auto',\n",
              "                       max_leaf_nodes=None, max_samples=None,\n",
              "                       min_impurity_decrease=0.0, min_impurity_split=None,\n",
              "                       min_samples_leaf=1, min_samples_split=2,\n",
              "                       min_weight_fraction_leaf=0.0, n_estimators=100,\n",
              "                       n_jobs=None, oob_score=False, random_state=None,\n",
              "                       verbose=0, warm_start=False)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 8
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "PFIUTVLnN6Ip",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        },
        "outputId": "0b9de2a0-6e02-4c98-cb10-372535be8e17"
      },
      "source": [
        "pv=model.predict(x_test)\n",
        "from sklearn.metrics import accuracy_score\n",
        "ac=accuracy_score(y_test,pv)\n",
        "print(\"Accuracy is : \",ac)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Accuracy is :  0.9722222222222222\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "-vUpB7AeOXQ0",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        },
        "outputId": "cc0e1c45-95bf-4494-f5c8-73d3505b7607"
      },
      "source": [
        "winetype=model.predict([[45.32,12.23,20.24,104.45,23.34,1.23,3.12,1.1,6.4,10.1,4.5,8.3,8000]])\n",
        "print(winetype)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[0]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "sbkOu8upPUzp",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 68
        },
        "outputId": "77480166-83f3-4884-c746-e157954ad936"
      },
      "source": [
        "from sklearn.metrics import confusion_matrix\n",
        "cm=confusion_matrix(y_test,pv)\n",
        "print(cm)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[[14  0  0]\n",
            " [ 1 12  0]\n",
            " [ 0  0  9]]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "AphHjHqvTu_d",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 341
        },
        "outputId": "92d8082c-8039-4157-994c-031f63439a37"
      },
      "source": [
        "import seaborn as sns\n",
        "sns.heatmap(cm,annot=True,cmap='cool',linewidths=0.5,yticklabels=['class_0', 'class_1', 'class_2'],xticklabels=['pv_class_0', 'pv_class_1', 'pv_class_2'])"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.6/dist-packages/statsmodels/tools/_testing.py:19: FutureWarning: pandas.util.testing is deprecated. Use the functions in the public API at pandas.testing instead.\n",
            "  import pandas.util.testing as tm\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7f65f14556a0>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 12
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 2 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Esoha0R_UlcM",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 626
        },
        "outputId": "f4805d7f-c6dc-4568-d511-7d8af619ea9a"
      },
      "source": [
        "fi=pd.Series(model.feature_importances_)\n",
        "index=fi.index\n",
        "print(fi)\n",
        "print(index)\n",
        "import matplotlib.pyplot as plt\n",
        "plt.figure(figsize=(30,8))\n",
        "plt.bar(data['feature_names'],fi)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "0     0.096276\n",
            "1     0.036785\n",
            "2     0.015315\n",
            "3     0.022828\n",
            "4     0.031763\n",
            "5     0.061824\n",
            "6     0.160805\n",
            "7     0.005987\n",
            "8     0.022790\n",
            "9     0.146709\n",
            "10    0.095407\n",
            "11    0.127545\n",
            "12    0.175965\n",
            "dtype: float64\n",
            "RangeIndex(start=0, stop=13, step=1)\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<BarContainer object of 13 artists>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 13
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 2160x576 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "kEUPANsvXVW8",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 54
        },
        "outputId": "88f10dda-3cf4-40bb-84ea-d9729033cdaf"
      },
      "source": [
        "print(data['feature_names'])"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "['alcohol', 'malic_acid', 'ash', 'alcalinity_of_ash', 'magnesium', 'total_phenols', 'flavanoids', 'nonflavanoid_phenols', 'proanthocyanins', 'color_intensity', 'hue', 'od280/od315_of_diluted_wines', 'proline']\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "jUBBIXcvVKaT",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 204
        },
        "outputId": "1bfec565-6f71-4916-95d3-89fa0864ec98"
      },
      "source": [
        "df_wine_final=pd.DataFrame({'alcohol':df_wine['alcohol'],\n",
        "                            'alcalinity_of_ash':df_wine['alcalinity_of_ash'],\n",
        "                            'magnesium':df_wine['magnesium'],\n",
        "                            'total_phenols':df_wine['total_phenols'],\n",
        "                            'flavanoids':df_wine['flavanoids'],\n",
        "                            'color_intensity':df_wine['color_intensity'],\n",
        "                            'hue':df_wine['hue'],\n",
        "                            'od280/od315_of_diluted_wines':df_wine['od280/od315_of_diluted_wines'],\n",
        "                            'proline':df_wine['proline'],\n",
        "                            'wine_type':df_wine['wine_type']})\n",
        "df_wine_final.head()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>alcohol</th>\n",
              "      <th>alcalinity_of_ash</th>\n",
              "      <th>magnesium</th>\n",
              "      <th>total_phenols</th>\n",
              "      <th>flavanoids</th>\n",
              "      <th>color_intensity</th>\n",
              "      <th>hue</th>\n",
              "      <th>od280/od315_of_diluted_wines</th>\n",
              "      <th>proline</th>\n",
              "      <th>wine_type</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>14.23</td>\n",
              "      <td>15.6</td>\n",
              "      <td>127.0</td>\n",
              "      <td>2.80</td>\n",
              "      <td>3.06</td>\n",
              "      <td>5.64</td>\n",
              "      <td>1.04</td>\n",
              "      <td>3.92</td>\n",
              "      <td>1065.0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>13.20</td>\n",
              "      <td>11.2</td>\n",
              "      <td>100.0</td>\n",
              "      <td>2.65</td>\n",
              "      <td>2.76</td>\n",
              "      <td>4.38</td>\n",
              "      <td>1.05</td>\n",
              "      <td>3.40</td>\n",
              "      <td>1050.0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>13.16</td>\n",
              "      <td>18.6</td>\n",
              "      <td>101.0</td>\n",
              "      <td>2.80</td>\n",
              "      <td>3.24</td>\n",
              "      <td>5.68</td>\n",
              "      <td>1.03</td>\n",
              "      <td>3.17</td>\n",
              "      <td>1185.0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>14.37</td>\n",
              "      <td>16.8</td>\n",
              "      <td>113.0</td>\n",
              "      <td>3.85</td>\n",
              "      <td>3.49</td>\n",
              "      <td>7.80</td>\n",
              "      <td>0.86</td>\n",
              "      <td>3.45</td>\n",
              "      <td>1480.0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>13.24</td>\n",
              "      <td>21.0</td>\n",
              "      <td>118.0</td>\n",
              "      <td>2.80</td>\n",
              "      <td>2.69</td>\n",
              "      <td>4.32</td>\n",
              "      <td>1.04</td>\n",
              "      <td>2.93</td>\n",
              "      <td>735.0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "   alcohol  alcalinity_of_ash  ...  proline  wine_type\n",
              "0    14.23               15.6  ...   1065.0          0\n",
              "1    13.20               11.2  ...   1050.0          0\n",
              "2    13.16               18.6  ...   1185.0          0\n",
              "3    14.37               16.8  ...   1480.0          0\n",
              "4    13.24               21.0  ...    735.0          0\n",
              "\n",
              "[5 rows x 10 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 15
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "zRfi0U1SXtru",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 459
        },
        "outputId": "a8d8fc64-19f8-48ae-a42a-93db6c05ab65"
      },
      "source": [
        "x=df_wine_final.iloc[:,0:9]\n",
        "print(x)\n",
        "y=df_wine_final.iloc[:,9]\n",
        "print(y)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "     alcohol  alcalinity_of_ash  ...  od280/od315_of_diluted_wines  proline\n",
            "0      14.23               15.6  ...                          3.92   1065.0\n",
            "1      13.20               11.2  ...                          3.40   1050.0\n",
            "2      13.16               18.6  ...                          3.17   1185.0\n",
            "3      14.37               16.8  ...                          3.45   1480.0\n",
            "4      13.24               21.0  ...                          2.93    735.0\n",
            "..       ...                ...  ...                           ...      ...\n",
            "173    13.71               20.5  ...                          1.74    740.0\n",
            "174    13.40               23.0  ...                          1.56    750.0\n",
            "175    13.27               20.0  ...                          1.56    835.0\n",
            "176    13.17               20.0  ...                          1.62    840.0\n",
            "177    14.13               24.5  ...                          1.60    560.0\n",
            "\n",
            "[178 rows x 9 columns]\n",
            "0      0\n",
            "1      0\n",
            "2      0\n",
            "3      0\n",
            "4      0\n",
            "      ..\n",
            "173    2\n",
            "174    2\n",
            "175    2\n",
            "176    2\n",
            "177    2\n",
            "Name: wine_type, Length: 178, dtype: int64\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "T9XyVRZfaQuI",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "xtrain,xtest,ytrain,ytest=train_test_split(x,y,test_size=.20,random_state=1)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Pms0nZ1xbHLz",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        },
        "outputId": "2e0140a1-da1f-4aa7-8c84-bbd811997a04"
      },
      "source": [
        "model=RandomForestClassifier()\n",
        "model.fit(xtrain,ytrain)\n",
        "pv=model.predict(xtest)\n",
        "ac1=accuracy_score(ytest,pv)\n",
        "print(ac1)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "0.9722222222222222\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "8f-S_TNZbMuk",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 283
        },
        "outputId": "12594474-3049-4f6c-e0c7-7e81a775a7e0"
      },
      "source": [
        "acv=[ac,ac1]\n",
        "aci=['accuracy','final_accuracy']\n",
        "plt.bar(aci,acv)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<BarContainer object of 2 artists>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 19
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "3py32ghuSYLf",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        ""
      ],
      "execution_count": null,
      "outputs": []
    }
  ]
}